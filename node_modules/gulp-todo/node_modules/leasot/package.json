{
  "name": "leasot",
  "description": "Parse and output TODOs and FIXMEs from comments in your files",
  "version": "2.2.2",
  "author": {
    "name": "Gilad Peleg",
    "email": "giladp007@gmail.com",
    "url": "http://giladpeleg.com"
  },
  "bin": {
    "leasot": "./bin/leasot.js"
  },
  "dependencies": {
    "chalk": "^1.0.0",
    "commander": "^2.8.1",
    "get-line-from-pos": "^1.0.0",
    "get-stdin": "^4.0.1",
    "glob": "^5.0.9",
    "json2xml": "^0.1.1",
    "lodash.compact": "^3.0.0",
    "lodash.defaults": "^3.1.1",
    "log-symbols": "^1.0.2",
    "map-async": "^0.1.1",
    "text-table": "^0.2.0"
  },
  "devDependencies": {
    "mocha": "^2.2.4",
    "should": "^6.0.1"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js",
    "lib",
    "bin"
  ],
  "keywords": [
    "fixme",
    "todo",
    "comments",
    "list",
    "parse",
    "generator",
    "ci",
    "productivity",
    "automation"
  ],
  "license": "MIT",
  "main": "index.js",
  "preferGlobal": true,
  "repository": {
    "type": "git",
    "url": "git://github.com/pgilad/leasot"
  },
  "scripts": {
    "test": "mocha -R spec ./tests/*.js"
  },
  "readme": "![leasot](media/leasot.png)\n\n> Parse and output TODOs and FIXMEs from comments in your files\n\n[![NPM Version](http://img.shields.io/npm/v/leasot.svg?style=flat)](https://npmjs.org/package/leasot)\n[![NPM Downloads](http://img.shields.io/npm/dm/leasot.svg?style=flat)](https://npmjs.org/package/leasot)\n[![Build Status](http://img.shields.io/travis/pgilad/leasot.svg?style=flat)](https://travis-ci.org/pgilad/leasot)\n\nEasily extract, collect and report TODOs and FIXMEs in your code. This project uses regex in order\nto extract your todos from comments.\n\n![Basic output example of leasot](media/table.png)\n\n## Comment format\n\n`TODO: add some info`\n\n- Spaces are optional.\n- Colon is optional.\n- Must be in a comment (line or block) in its' own line (`some code(); //TODO: do something` is not supported).\n- Can be prefixed with a @ (i.e @TODO).\n- Spaces are trimmed around comment text.\n- Supported default types are `TODO` and `FIXME` - case insensitive.\n- Additional types can be added (using `tags` in cli and `customTags` in `leasot.parse`)\n\n## Supported languages:\n\n| Filetype     | Extension            | Notes                              |\n| ------------ | -------------------- | -----------------------------------|\n| C#           | `.cs`                | Supports `// and /* */` comments.  |\n| C++/C        | `.cpp` `.c` `.h`     | Supports `// and /* */` comments.  |\n| Coffee-React | `.cjsx`              | Supports `#` comments.             |\n| Coffeescript | `.coffee`            | Supports `#` comments.             |\n| Erlang       | `.erl`               | Supports `%` comments.             |\n| Go           | `.go`                | Supports `// and /* */` comments.  |\n| Handlebars   | `.hbs`               | Supports `{{! }}` and `{{!-- --}}` |\n| Haskell      | `.hs`                | Supports `--`                      |\n| Jade         | `.jade`              | Supports `//` and `//-` comments.  |\n| Javascript   | `.js`                | Supports `// and /* */` comments   |\n| Jsx          | `.jsx`               | Supports `// and /* */` comments.  |\n| Less         | `.less`              | Supports `// and /* */` comments.  |\n| Perl         | `.pl`, `.pm`         | Supports `#` comments.             |\n| PHP          | `.php`               | Supports `// and /* */` comments.  |\n| Python       | `.py`                | Supports `\"\"\"` and `#` comments.   |\n| Ruby         | `.rb`                | Supports `#` comments.             |\n| Sass         | `.sass` `.scss`      | Supports `// and /* */` comments.  |\n| Shell        | `.sh` `.zsh` `.bash` | Supports `#` comments.             |\n| Stylus       | `.styl`              | Supports `// and /* */` comments.  |\n| Twig         | `.twig`              | Supports `{#  #}` and `<!-- -->`   |\n| Typescript   | `.ts`                | Supports `// and /* */` comments.  |\n\nJavascript is the default parser.\n\n**PRs for additional filetypes is most welcomed!!**\n\n## Usage\n\n### Command Line\n\n#### Installation\n\n```sh\n$ npm install --global leasot\n```\n\n#### Examples\n\n```sh\n‚ùØ leasot --help\n\n  Usage: leasot [options] <file ...>\n\n  Parse and output TODOs and FIXMEs from comments in your files\n\n  Options:\n\n    -h, --help                 output usage information\n    -V, --version              output the version number\n    -r, --reporter [reporter]  use reporter (table|json|xml|markdown|raw) (default: table)\n    -t, --filetype [filetype]  force the filetype to parse. Useful for streams (default: .js)\n    -T, --tags <tags>          add additional comment types to find (alongside todo & fixme)\n\n  Examples:\n\n    # Check a specific file\n    $ leasot index.js\n\n    # Check php files with glob\n    $ leasot **/*.php\n\n    # Check multiple different filetypes\n    $ leasot app/**/*.js test.rb\n\n    # Use the json reporter\n    $ leasot --reporter json index.js\n\n    # Search for REVIEW comments as well\n    $ leasot --tags review index.js\n\n    # Export TODOS as markdown to a TODO.md file\n    $ leasot --reporter markdown app/**/*.py > TODO.md\n\n    # Check a stream specifying the filetype as coffee\n    $ cat index.coffee | leasot --filetype .coffee\n```\n\n### Programmatic\n\n#### Installation\n\n```sh\n$ npm install --save-dev leasot\n```\n\n#### Examples\n\n```js\nvar fs = require('fs');\nvar leasot = require('leasot');\n\nvar contents = fs.readFileSync('./contents.js', 'utf8');\n// get the filetype of the file, or force a special parser\nvar filetype = path.extname('./contents.js');\n// add file for better reporting\nvar file = 'contents.js';\nvar todos = leasot.parse(filetype, contents, file);\n\n// -> todos now contains the array of todos/fixme parsed\n\nvar output = leasot.reporter(todos, {\n    reporter: 'json',\n    spacing: 2\n});\n\nconsole.log(output);\n// -> json output of the todos\n```\n\n### Build Time\n\n* [gulp-todo](https://github.com/pgilad/gulp-todo)\n\n## API\n\n```js\nvar leasot = require('leasot');\n```\n\n`leasot` exposes the following API:\n\n### .isExtSupported(extension)\n\nCheck whether extension is supported by parser.\n\nSpecify an extension including the prefixing dot, for example:\n\n`leasot.isExtSupported('.js'); //-> true`\n\n**Returns**: `Boolean`\n\n### .parse(extension, contents, filename, customTags)\n\nParse the contents, using the provided `extension`. `filename` will be attached\nto the return object, so it is recommended to use it if you know it.\n\n`extension` is the extension to parse as, including a prefixing dot.\n\n`contents` is a string containing the contents to parse.\n\n`filename` is an optional string.\n\n`customTags` is an optional array with additional tags (comment types) to search for (alongside todo & fixme).\n\n**Returns**: `Array` of comments.\n\n```js\n[{\n    file: 'parsedFile.js',\n    text: 'comment text',\n    kind: 'TODO',\n    line: 8\n}]\n```\n\n### .reporter(comments, config)\n\nUse the specified reporter to report the comments.\n\n`comments` is the array of comments received from `leasot.parse()`.\n\n`config` is an object that will also be passed to the reporter itself (allowing custom options for each reporter).\n\nIt may also contain the specified reporter:\n\n#### config.reporter\n\nCan be a string indicating the [built-in reporter](#built-in-reporters) to use,\n or an external library used as a reporter.\n\nCould also be a custom function `(comments, config)`\n\n**Type**: `String|Function`\n\n**Required**: `false`\n\n**Default**: `raw`\n\n## Built-in Reporters\n\n- json\n- xml\n- raw\n- table\n- markdown\n\nEach reporter might contain config params that are useful only for that reporter:\n\n### Markdown\n\nReturns a markdown version of the todos.\n\n### Options\n\n#### newLine\n\nHow to separate lines in the output file. Defaults to your OS's default line separator.\n\n**Type**: `String`\n\n**Default**: `Your system default line feed`\n\n### padding\n\nHow many `newLine`s should separate between comment type blocks.\n\n**Type**: `Number`\n\n**Default**: `2`\n\n**Minimum**: `0`\n\n### transformHeader(kind)\n\nControl the output of a header for each comment kind (*i.e todo, fixme*).\n\n**Type**: `Function`\n\n**Default**:\n```js\ntransformHeader: function (kind) {\n    return ['### ' + kind + 's',\n        '| Filename | line # | ' + kind,\n        '|:------|:------:|:------'\n    ];\n}\n```\n\n**kind**: will be be passed as the comment kind (todo/fixme).\n\n**Returns**: `String[]|String`\n\nYou are expected to return either an `Array of strings` or just a `string`. If you return an array - each item will be separated by a newline in the output.\n\n### transformComment(file, line, text, kind)\n\nControl the output for each comment.\n\n**Type**: `Function`\n\n**Default**:\n```js\ntransformComment: function (file, line, text, kind) {\n    return ['| ' + file + ' | ' + line + ' | ' + text];\n},\n```\n\n**file**: filename the comment was in.\n\n**line**: line of comment.\n\n**text**: comment text\n\n**kind**: will be be passed as the comment kind (todo/fixme).\n\n**Returns**: `String[]|String`\n\nYou are expected to return either an `Array of strings` or just a `string`. If you return an array - each item will be separated by a newline in the output.\n\n### Table\n\nReturns a pretty formatted table of the todos.\n\n### Raw\n\nJust returns the raw javascript todos\n\n### JSON\n\nReturn a JSON valid representation of the todos.\n\n#### Options\n\n##### spacing\n\nType: `Number`\n\nDefault: `2`\n\n### XML\n\nReturn an unformatted XML valid representation of the todos.\n\nParsed using [json2xml](https://github.com/estheban/node-json2xml)\n\n#### Options\n\n##### header\n\nWhether to include xml header\n\nType: `Boolean`\n\nDefault: `true`\n\n##### attributes_key\n\nSee https://github.com/estheban/node-json2xml#options--behaviour\n\nType: `Boolean`\n\nDefault: `undefined`\n\n## License\n\nMIT ¬©[Gilad Peleg](http://giladpeleg.com)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pgilad/leasot/issues"
  },
  "_id": "leasot@2.2.2",
  "dist": {
    "shasum": "bc95496cd427fad91f59931d83f6bf45cbaeb7f7"
  },
  "_from": "leasot@^2.2.1",
  "_resolved": "https://registry.npmjs.org/leasot/-/leasot-2.2.2.tgz"
}
