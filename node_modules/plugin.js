pluginConfig = require('plugin-config.js');
webdriver =  require('browserstack-webdriver');


var plugin={};

/**
 * Get Valid Employee.
 *
 */
plugin.getValidBasicInfo = function(){
    var employee={};
    employee.firstname='John';
    employee.lastname='Doe';
    employee.address='3730 Washington BLVD';
    employee.address2='';
    employee.city='Indianapolis';
    employee.stateid='IN';
    employee.zip='46205';
    employee.middleinitial='';
    employee.ssn='111111111';
    employee.ssnConfirmation='111111111';
    employee.dob='03/02/1987';
    employee.rehire=0;
    return employee;
}

plugin.setInvalidFirstName=function(employee){
  employee.firstname='%$#^';
  return employee; 
}

plugin.setRehire=function(employee){
  employee.rehire=true;
  return employee;
}

plugin.setMisMatchSSN=function(employee){
  employee.ssn='111111111';
  employee.ssnConfirmation='111111112';
  return employee;
}

//Set employee.firstname to ''
plugin.setFieldToEmptyString=function(obj,prop){
  if(obj.hasOwnProperty(prop)){ obj.prop=''; }
  return obj;
}

plugin.setEmployeeFromCA=function(employee){
  employee.stateid=5;
  return employee;
}

plugin.setEmployeeFromSC=function(employee){
  employee.stateid=44;
  return employee;
}

//TODO: Get Valid EZ address
plugin.setEmpowermentZone=function(employee){
  employee.address='';
  return employee;
}

//format 1/1/2015
plugin.setBirthday=function(employee, dateString){
  employee.dob=dateString;
  return employee;
}

/**
 * Login to plugin.
 *
 * @param {driver} webdriver instance.
 * @param {function} callback Function to call when the request is complete.
 */
plugin.login=function(driver, callback){
    driver.get(pluginConfig.url+'/users/login');
    driver.findElement(webdriver.By.name('user[username]')).sendKeys(pluginConfig.username);
    driver.findElement(webdriver.By.name('user[password]')).sendKeys(pluginConfig.password);
    driver.findElement(webdriver.By.id('frmLogin')).submit();
    driver.getTitle().then(function(title) {
      console.log(title);
      if('WOTC Tax Credit ID: Welcome' !== title) throw "Unable to login";
      return callback;
    });
}

/**
 * CompleteBasicInfo sets valid default employee values   
 * 
 * @param {driver} webdriver instance.
 * @param {function} callback Function to call when the request is complete.
 *
 * NOTE: all completeXXX methods set default values and move to next url; use setXXX methods for manipulating values
 */

plugin.completeBasicInfo=function(driver,callback){
    driver.get(pluginConfig.url+'/employees/basic_info?new=1');
    var employee=plugin.getValidBasicInfo();
    //employee=plugin.setInvalidFirstName(employee);
    console.log(employee);
    for (var property in employee) {
      if (employee.hasOwnProperty(property)) {
        console.log(property);
        if(property=='rehire'){
          console.log('employee-'+property+'-'+employee[property]);
          driver.findElement(webdriver.By.id('employee-'+property+'-'+employee[property])).click(); //employee[property]
        }else if(property=='stateid'){
          console.log(property);
          driver.findElement(webdriver.By.name('employee['+property+']')).click();
          //var el = driver.findElement(webdriver.By.id('employee-stateid'));
          //var options=el.findElement(webdriver.By.tagName('option'));
        }else{
          driver.findElement(webdriver.By.name('employee['+property+']')).clear();
          driver.findElement(webdriver.By.name('employee['+property+']')).sendKeys(employee[property]); //employee[property]
        }
      }
    }    
    driver.findElement(webdriver.By.id('btnSubmit')).submit();
    driver.getCurrentUrl().then(function(currentUrl) {
      console.log(currentUrl);
      //TODO: Decide what the best unique identifier is that will remain static...not title most likely...url should?
      if(pluginConfig.url+'/employees/question1' !== currentUrl) throw "Unable to complete basic info";
      return callback;
    });
}

plugin.completeQ1=function(driver, radioValue, callback){
    var e = (typeof radioValue === undefined || radioValue === false || radioValue == 'no') ? 'employee-afdc-0' : 'employee-afdc-1';
    driver.findElement(webdriver.By.id(e)).click(); 
    //TODO: Check if subsection displays based on provided value and
    driver.findElement(webdriver.By.id('frmWOTC')).submit();
    driver.getCurrentUrl().then(function(currentUrl) {
      console.log(currentUrl);
      if(pluginConfig.url+'/employees/question2' !== currentUrl) throw "User able to move beyond screen without completing required fields";
      return callback; 
    });
}

plugin.goQ1 = function(driver, callback){
    plugin.completeBasicInfo(driver, plugin.login(driver, null));
    return callback();
}

plugin.finishRemainingQuestions=function(){

}

module.exports = plugin;